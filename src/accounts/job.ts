/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const JOB_DISCRIMINATOR = new Uint8Array([
  75, 124, 80, 203, 161, 180, 202, 80,
]);

export function getJobDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(JOB_DISCRIMINATOR);
}

export type Job = {
  discriminator: ReadonlyUint8Array;
  employer: Address;
  freelancer: Address;
  delegate: Address;
  vault: Address;
  amount: bigint;
  collateralAmount: bigint;
  updatedAt: bigint;
  confirmationDuration: bigint;
  confirmationDeadline: bigint;
  status: number;
  vaultBump: number;
  bump: number;
};

export type JobArgs = {
  employer: Address;
  freelancer: Address;
  delegate: Address;
  vault: Address;
  amount: number | bigint;
  collateralAmount: number | bigint;
  updatedAt: number | bigint;
  confirmationDuration: number | bigint;
  confirmationDeadline: number | bigint;
  status: number;
  vaultBump: number;
  bump: number;
};

export function getJobEncoder(): FixedSizeEncoder<JobArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['employer', getAddressEncoder()],
      ['freelancer', getAddressEncoder()],
      ['delegate', getAddressEncoder()],
      ['vault', getAddressEncoder()],
      ['amount', getU64Encoder()],
      ['collateralAmount', getU64Encoder()],
      ['updatedAt', getI64Encoder()],
      ['confirmationDuration', getI64Encoder()],
      ['confirmationDeadline', getI64Encoder()],
      ['status', getU8Encoder()],
      ['vaultBump', getU8Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: JOB_DISCRIMINATOR })
  );
}

export function getJobDecoder(): FixedSizeDecoder<Job> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['employer', getAddressDecoder()],
    ['freelancer', getAddressDecoder()],
    ['delegate', getAddressDecoder()],
    ['vault', getAddressDecoder()],
    ['amount', getU64Decoder()],
    ['collateralAmount', getU64Decoder()],
    ['updatedAt', getI64Decoder()],
    ['confirmationDuration', getI64Decoder()],
    ['confirmationDeadline', getI64Decoder()],
    ['status', getU8Decoder()],
    ['vaultBump', getU8Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getJobCodec(): FixedSizeCodec<JobArgs, Job> {
  return combineCodec(getJobEncoder(), getJobDecoder());
}

export function decodeJob<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Job, TAddress>;
export function decodeJob<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Job, TAddress>;
export function decodeJob<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Job, TAddress> | MaybeAccount<Job, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getJobDecoder()
  );
}

export async function fetchJob<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Job, TAddress>> {
  const maybeAccount = await fetchMaybeJob(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeJob<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Job, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeJob(maybeAccount);
}

export async function fetchAllJob(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Job>[]> {
  const maybeAccounts = await fetchAllMaybeJob(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeJob(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Job>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeJob(maybeAccount));
}

export function getJobSize(): number {
  return 179;
}
