/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const MASTER_DISCRIMINATOR = new Uint8Array([
  168, 213, 193, 12, 77, 162, 58, 235,
]);

export function getMasterDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(MASTER_DISCRIMINATOR);
}

export type Master = {
  discriminator: ReadonlyUint8Array;
  authority: Address;
  feeVault: Address;
  protocolFee: bigint;
  bump: number;
};

export type MasterArgs = {
  authority: Address;
  feeVault: Address;
  protocolFee: number | bigint;
  bump: number;
};

export function getMasterEncoder(): FixedSizeEncoder<MasterArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['feeVault', getAddressEncoder()],
      ['protocolFee', getU64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: MASTER_DISCRIMINATOR })
  );
}

export function getMasterDecoder(): FixedSizeDecoder<Master> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['feeVault', getAddressDecoder()],
    ['protocolFee', getU64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getMasterCodec(): FixedSizeCodec<MasterArgs, Master> {
  return combineCodec(getMasterEncoder(), getMasterDecoder());
}

export function decodeMaster<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Master, TAddress>;
export function decodeMaster<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Master, TAddress>;
export function decodeMaster<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Master, TAddress> | MaybeAccount<Master, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMasterDecoder()
  );
}

export async function fetchMaster<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Master, TAddress>> {
  const maybeAccount = await fetchMaybeMaster(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMaster<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Master, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMaster(maybeAccount);
}

export async function fetchAllMaster(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Master>[]> {
  const maybeAccounts = await fetchAllMaybeMaster(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMaster(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Master>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMaster(maybeAccount));
}

export function getMasterSize(): number {
  return 81;
}
