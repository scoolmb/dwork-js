/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAcceptJobInstruction,
  type ParsedCancelJobInstruction,
  type ParsedCompleteJobInstruction,
  type ParsedConfirmJobInstruction,
  type ParsedInitializeInstruction,
  type ParsedInitializeJobInstruction,
  type ParsedReportJobByEmployerInstruction,
  type ParsedReportJobByFreelancerInstruction,
} from '../instructions';

export const D_WORK_PROGRAM_ADDRESS =
  '7vBZmWXoza7mbbM7U1UPCrDXKfSaohneSV67AiYFRtPA' as Address<'7vBZmWXoza7mbbM7U1UPCrDXKfSaohneSV67AiYFRtPA'>;

export enum DWorkAccount {
  Job,
  Master,
}

export function identifyDWorkAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): DWorkAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([75, 124, 80, 203, 161, 180, 202, 80])
      ),
      0
    )
  ) {
    return DWorkAccount.Job;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([168, 213, 193, 12, 77, 162, 58, 235])
      ),
      0
    )
  ) {
    return DWorkAccount.Master;
  }
  throw new Error(
    'The provided account could not be identified as a dWork account.'
  );
}

export enum DWorkInstruction {
  AcceptJob,
  CancelJob,
  CompleteJob,
  ConfirmJob,
  Initialize,
  InitializeJob,
  ReportJobByEmployer,
  ReportJobByFreelancer,
}

export function identifyDWorkInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): DWorkInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([43, 201, 124, 1, 19, 189, 96, 10])
      ),
      0
    )
  ) {
    return DWorkInstruction.AcceptJob;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([126, 241, 155, 241, 50, 236, 83, 118])
      ),
      0
    )
  ) {
    return DWorkInstruction.CancelJob;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([221, 216, 225, 72, 101, 250, 3, 11])
      ),
      0
    )
  ) {
    return DWorkInstruction.CompleteJob;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([229, 61, 217, 223, 125, 118, 21, 67])
      ),
      0
    )
  ) {
    return DWorkInstruction.ConfirmJob;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return DWorkInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([137, 22, 138, 41, 76, 208, 114, 50])
      ),
      0
    )
  ) {
    return DWorkInstruction.InitializeJob;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([65, 254, 34, 234, 192, 155, 10, 81])
      ),
      0
    )
  ) {
    return DWorkInstruction.ReportJobByEmployer;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([211, 107, 174, 55, 107, 144, 13, 231])
      ),
      0
    )
  ) {
    return DWorkInstruction.ReportJobByFreelancer;
  }
  throw new Error(
    'The provided instruction could not be identified as a dWork instruction.'
  );
}

export type ParsedDWorkInstruction<
  TProgram extends string = '7vBZmWXoza7mbbM7U1UPCrDXKfSaohneSV67AiYFRtPA',
> =
  | ({
      instructionType: DWorkInstruction.AcceptJob;
    } & ParsedAcceptJobInstruction<TProgram>)
  | ({
      instructionType: DWorkInstruction.CancelJob;
    } & ParsedCancelJobInstruction<TProgram>)
  | ({
      instructionType: DWorkInstruction.CompleteJob;
    } & ParsedCompleteJobInstruction<TProgram>)
  | ({
      instructionType: DWorkInstruction.ConfirmJob;
    } & ParsedConfirmJobInstruction<TProgram>)
  | ({
      instructionType: DWorkInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: DWorkInstruction.InitializeJob;
    } & ParsedInitializeJobInstruction<TProgram>)
  | ({
      instructionType: DWorkInstruction.ReportJobByEmployer;
    } & ParsedReportJobByEmployerInstruction<TProgram>)
  | ({
      instructionType: DWorkInstruction.ReportJobByFreelancer;
    } & ParsedReportJobByFreelancerInstruction<TProgram>);
