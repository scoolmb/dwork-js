/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { D_WORK_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REPORT_JOB_BY_FREELANCER_DISCRIMINATOR = new Uint8Array([
  211, 107, 174, 55, 107, 144, 13, 231,
]);

export function getReportJobByFreelancerDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REPORT_JOB_BY_FREELANCER_DISCRIMINATOR
  );
}

export type ReportJobByFreelancerInstruction<
  TProgram extends string = typeof D_WORK_PROGRAM_ADDRESS,
  TAccountFreelancer extends string | AccountMeta<string> = string,
  TAccountJob extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountFreelancer extends string
        ? WritableSignerAccount<TAccountFreelancer> &
            AccountSignerMeta<TAccountFreelancer>
        : TAccountFreelancer,
      TAccountJob extends string ? WritableAccount<TAccountJob> : TAccountJob,
      ...TRemainingAccounts,
    ]
  >;

export type ReportJobByFreelancerInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ReportJobByFreelancerInstructionDataArgs = {};

export function getReportJobByFreelancerInstructionDataEncoder(): FixedSizeEncoder<ReportJobByFreelancerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: REPORT_JOB_BY_FREELANCER_DISCRIMINATOR,
    })
  );
}

export function getReportJobByFreelancerInstructionDataDecoder(): FixedSizeDecoder<ReportJobByFreelancerInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getReportJobByFreelancerInstructionDataCodec(): FixedSizeCodec<
  ReportJobByFreelancerInstructionDataArgs,
  ReportJobByFreelancerInstructionData
> {
  return combineCodec(
    getReportJobByFreelancerInstructionDataEncoder(),
    getReportJobByFreelancerInstructionDataDecoder()
  );
}

export type ReportJobByFreelancerInput<
  TAccountFreelancer extends string = string,
  TAccountJob extends string = string,
> = {
  freelancer: TransactionSigner<TAccountFreelancer>;
  job: Address<TAccountJob>;
};

export function getReportJobByFreelancerInstruction<
  TAccountFreelancer extends string,
  TAccountJob extends string,
  TProgramAddress extends Address = typeof D_WORK_PROGRAM_ADDRESS,
>(
  input: ReportJobByFreelancerInput<TAccountFreelancer, TAccountJob>,
  config?: { programAddress?: TProgramAddress }
): ReportJobByFreelancerInstruction<
  TProgramAddress,
  TAccountFreelancer,
  TAccountJob
> {
  // Program address.
  const programAddress = config?.programAddress ?? D_WORK_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    freelancer: { value: input.freelancer ?? null, isWritable: true },
    job: { value: input.job ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.freelancer),
      getAccountMeta(accounts.job),
    ],
    data: getReportJobByFreelancerInstructionDataEncoder().encode({}),
    programAddress,
  } as ReportJobByFreelancerInstruction<
    TProgramAddress,
    TAccountFreelancer,
    TAccountJob
  >);
}

export type ParsedReportJobByFreelancerInstruction<
  TProgram extends string = typeof D_WORK_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    freelancer: TAccountMetas[0];
    job: TAccountMetas[1];
  };
  data: ReportJobByFreelancerInstructionData;
};

export function parseReportJobByFreelancerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedReportJobByFreelancerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { freelancer: getNextAccount(), job: getNextAccount() },
    data: getReportJobByFreelancerInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
