/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { D_WORK_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CONFIRM_JOB_DISCRIMINATOR = new Uint8Array([
  229, 61, 217, 223, 125, 118, 21, 67,
]);

export function getConfirmJobDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CONFIRM_JOB_DISCRIMINATOR);
}

export type ConfirmJobInstruction<
  TProgram extends string = typeof D_WORK_PROGRAM_ADDRESS,
  TAccountEmployer extends string | AccountMeta<string> = string,
  TAccountJob extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountEmployer extends string
      ? WritableSignerAccount<TAccountEmployer> &
      AccountSignerMeta<TAccountEmployer>
      : TAccountEmployer,
      TAccountJob extends string ? WritableAccount<TAccountJob> : TAccountJob,
      ...TRemainingAccounts,
    ]
  >;

export type ConfirmJobInstructionData = { discriminator: ReadonlyUint8Array };

export type ConfirmJobInstructionDataArgs = {};

export function getConfirmJobInstructionDataEncoder(): FixedSizeEncoder<ConfirmJobInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CONFIRM_JOB_DISCRIMINATOR })
  );
}

export function getConfirmJobInstructionDataDecoder(): FixedSizeDecoder<ConfirmJobInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getConfirmJobInstructionDataCodec(): FixedSizeCodec<
  ConfirmJobInstructionDataArgs,
  ConfirmJobInstructionData
> {
  return combineCodec(
    getConfirmJobInstructionDataEncoder(),
    getConfirmJobInstructionDataDecoder()
  );
}

export type ConfirmJobInput<
  TAccountEmployer extends string = string,
  TAccountJob extends string = string,
> = {
  employer: TransactionSigner<TAccountEmployer>;
  job: Address<TAccountJob>;
};

export function getConfirmJobInstruction<
  TAccountEmployer extends string,
  TAccountJob extends string,
  TProgramAddress extends Address = typeof D_WORK_PROGRAM_ADDRESS,
>(
  input: ConfirmJobInput<TAccountEmployer, TAccountJob>,
  config?: { programAddress?: TProgramAddress }
): ConfirmJobInstruction<TProgramAddress, TAccountEmployer, TAccountJob> {
  // Program address.
  const programAddress = config?.programAddress ?? D_WORK_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    employer: { value: input.employer ?? null, isWritable: true },
    job: { value: input.job ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [getAccountMeta(accounts.employer), getAccountMeta(accounts.job)],
    data: getConfirmJobInstructionDataEncoder().encode({}),
    programAddress,
  } as ConfirmJobInstruction<TProgramAddress, TAccountEmployer, TAccountJob>);
}

export type ParsedConfirmJobInstruction<
  TProgram extends string = typeof D_WORK_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    employer: TAccountMetas[0];
    job: TAccountMetas[1];
  };
  data: ConfirmJobInstructionData;
};

export function parseConfirmJobInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedConfirmJobInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { employer: getNextAccount(), job: getNextAccount() },
    data: getConfirmJobInstructionDataDecoder().decode(instruction.data),
  };
}
