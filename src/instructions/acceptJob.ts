/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { D_WORK_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const ACCEPT_JOB_DISCRIMINATOR = new Uint8Array([
  43, 201, 124, 1, 19, 189, 96, 10,
]);

export function getAcceptJobDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(ACCEPT_JOB_DISCRIMINATOR);
}

export type AcceptJobInstruction<
  TProgram extends string = typeof D_WORK_PROGRAM_ADDRESS,
  TAccountFreelancer extends string | AccountMeta<string> = string,
  TAccountJob extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountFreelancer extends string
        ? WritableSignerAccount<TAccountFreelancer> &
            AccountSignerMeta<TAccountFreelancer>
        : TAccountFreelancer,
      TAccountJob extends string ? WritableAccount<TAccountJob> : TAccountJob,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AcceptJobInstructionData = { discriminator: ReadonlyUint8Array };

export type AcceptJobInstructionDataArgs = {};

export function getAcceptJobInstructionDataEncoder(): FixedSizeEncoder<AcceptJobInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: ACCEPT_JOB_DISCRIMINATOR })
  );
}

export function getAcceptJobInstructionDataDecoder(): FixedSizeDecoder<AcceptJobInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getAcceptJobInstructionDataCodec(): FixedSizeCodec<
  AcceptJobInstructionDataArgs,
  AcceptJobInstructionData
> {
  return combineCodec(
    getAcceptJobInstructionDataEncoder(),
    getAcceptJobInstructionDataDecoder()
  );
}

export type AcceptJobAsyncInput<
  TAccountFreelancer extends string = string,
  TAccountJob extends string = string,
  TAccountVault extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  freelancer: TransactionSigner<TAccountFreelancer>;
  job: Address<TAccountJob>;
  vault?: Address<TAccountVault>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getAcceptJobInstructionAsync<
  TAccountFreelancer extends string,
  TAccountJob extends string,
  TAccountVault extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof D_WORK_PROGRAM_ADDRESS,
>(
  input: AcceptJobAsyncInput<
    TAccountFreelancer,
    TAccountJob,
    TAccountVault,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  AcceptJobInstruction<
    TProgramAddress,
    TAccountFreelancer,
    TAccountJob,
    TAccountVault,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? D_WORK_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    freelancer: { value: input.freelancer ?? null, isWritable: true },
    job: { value: input.job ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.job.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.freelancer),
      getAccountMeta(accounts.job),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getAcceptJobInstructionDataEncoder().encode({}),
    programAddress,
  } as AcceptJobInstruction<
    TProgramAddress,
    TAccountFreelancer,
    TAccountJob,
    TAccountVault,
    TAccountSystemProgram
  >);
}

export type AcceptJobInput<
  TAccountFreelancer extends string = string,
  TAccountJob extends string = string,
  TAccountVault extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  freelancer: TransactionSigner<TAccountFreelancer>;
  job: Address<TAccountJob>;
  vault: Address<TAccountVault>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getAcceptJobInstruction<
  TAccountFreelancer extends string,
  TAccountJob extends string,
  TAccountVault extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof D_WORK_PROGRAM_ADDRESS,
>(
  input: AcceptJobInput<
    TAccountFreelancer,
    TAccountJob,
    TAccountVault,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): AcceptJobInstruction<
  TProgramAddress,
  TAccountFreelancer,
  TAccountJob,
  TAccountVault,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? D_WORK_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    freelancer: { value: input.freelancer ?? null, isWritable: true },
    job: { value: input.job ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.freelancer),
      getAccountMeta(accounts.job),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getAcceptJobInstructionDataEncoder().encode({}),
    programAddress,
  } as AcceptJobInstruction<
    TProgramAddress,
    TAccountFreelancer,
    TAccountJob,
    TAccountVault,
    TAccountSystemProgram
  >);
}

export type ParsedAcceptJobInstruction<
  TProgram extends string = typeof D_WORK_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    freelancer: TAccountMetas[0];
    job: TAccountMetas[1];
    vault: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: AcceptJobInstructionData;
};

export function parseAcceptJobInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAcceptJobInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      freelancer: getNextAccount(),
      job: getNextAccount(),
      vault: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getAcceptJobInstructionDataDecoder().decode(instruction.data),
  };
}
